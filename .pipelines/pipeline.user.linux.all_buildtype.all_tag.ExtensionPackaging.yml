
environment:
  host:
    os: 'linux'
    flavor: 'ubuntu'
    version: '16.04'
  runtime:
    provider: 'appcontainer'
    image: 'cdpxlinux.azurecr.io/global/ubuntu-1804-all:1.0'
    source_mode: 'link'

# The following is a metadata section that describes the versioning scheme and basic version datacenter to use. This data will be used to
# generate content in the .version folder for use by your custom versioning steps.
# In fact, in this sample, a file named .version\PipelineAssemblyInfo.cs will be generated that contains the following code (ignore the actual
# versions because those are dummy values).
#
# // This is a CDPX pipeline generated file
# using System.Reflection;
# [assembly: AssemblyVersion("1.0.060517.1000")]
# [assembly: AssemblyFileVersion("1.0.060517.1000")]
# [assembly: AssemblyInformationalVersion("1.0.060517.1000-test-31f791f1")]
#
# The key point is that this file is not checked in by CDPX. So, we check in a dummy file with similar content and add this file as a compile
# item with a link. When the code is built in CDPX, the file is first overwritten with actual version numbers. Thus, when the code compiles,
# the new version numbers are picked up.
#
# Obviously, this may not work for everyone. So, in addition to these template files, CDPX writes out several info files whose content is some
# part of the version number. Which part is hinted at by the name of the file.
# For example, package.semantic.info will contain patch semantic version number in the form 1.0.MMddyyrrrr-tag-commit.
version:
  name: 'OMSLinuxAgent'
  tag: 'alpha'
  system: 'custom'         # Must be one of patch, buildrevision, revisioncounter or custom. Other schemes can be added based on feedback.
  exclude_commit: true            # Set this to true if you would like to exclude the commit hash from the build number.  Defaults to false.

versioning:
  commands:
    - !!defaultcommand
      name: 'Versioning'
      command: 'pipeline-version.sh'

workspace_options:
  download_current_artifacts: true
  force_workspace_wipe: false
  enable_legacy_networking: true

static_analysis_options:

restore:
  commands:
    - !!defaultcommand
      name: 'Install'
      command: 'pipeline-extension-packaging-restore.sh'

build:
  commands:
    - !!buildcommand
      name: 'Build'
      command: 'pipeline-extension-packaging.sh'
      artifacts:
        - from: 'pipeline-extension-packaging'
          to: 'buildoutput'
          include:
            - '**/*'

package:
  commands: