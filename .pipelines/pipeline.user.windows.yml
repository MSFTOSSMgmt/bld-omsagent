
environment:
  host:
    os: 'windows'
    flavor: 'datacenter'
    version: 2016
  runtime:
    provider: 'appcontainer'
    image: 'cdpxwin.azurecr.io/legacy/global/vse2017u5-ext-win14393.1884:1.0'
    source_mode: 'link'

# The following is a metadata section that describes the versioning scheme and basic version datacenter to use. This data will be used to
# generate content in the .version folder for use by your custom versioning steps.
# In fact, in this sample, a file named .version\PipelineAssemblyInfo.cs will be generated that contains the following code (ignore the actual
# versions because those are dummy values).
#
# // This is a CDPX pipeline generated file
# using System.Reflection;
# [assembly: AssemblyVersion("1.0.060517.1000")]
# [assembly: AssemblyFileVersion("1.0.060517.1000")]
# [assembly: AssemblyInformationalVersion("1.0.060517.1000-test-31f791f1")]
#
# The key point is that this file is not checked in by CDPX. So, we check in a dummy file with similar content and add this file as a compile
# item with a link. When the code is built in CDPX, the file is first overwritten with actual version numbers. Thus, when the code compiles,
# the new version numbers are picked up.
#
# Obviously, this may not work for everyone. So, in addition to these template files, CDPX writes out several info files whose content is some
# part of the version number. Which part is hinted at by the name of the file.
# For example, package.semantic.info will contain patch semantic version number in the form 1.0.MMddyyrrrr-tag-commit.
version:
  name: 'OMSLinuxAgent'
  tag: 'alpha'
  system: 'custom'         # Must be one of patch, buildrevision, revisioncounter or custom. Other schemes can be added based on feedback.
  exclude_commit: true              # Set this to true if you would like to exclude the commit hash from the build number.  Defaults to false.

versioning:
  commands:
    - !!defaultcommand
      name: 'Versioning'
      command: 'pipeline-version.cmd'

workspace_options:
  force_workspace_wipe: false
  enable_legacy_networking: true

static_analysis_options:

# Code signing validation for Linux-built, Windows-signed pipelines 
# is apparently broken, so we will exclude the flagged files for now
signing_options:
  codesign_validation_glob_pattern: '-:regex|**\*.psd1'

# This phase will copy the *.sha256sums from previous artifacts of all modules into a specific directory under the GIT_SOURCE
# !!! CDP cannot sign files outside the GIT_SOURCE folder path 
build:
  commands:
    - !!buildcommand
      name: 'DSC Signing'
      command: 'pipeline-dsc-signing.cmd'
      artifacts:
        - from: 'pipeline-signing\dsc\signing'
          to: 'buildoutput'
          include:
            - '**/*'
          signing_options:
            profile: 'CP-453387-pgpdetached'
    - !!buildcommand
      name: 'OMS ShellBundle Signing'
      command: 'pipeline-oms-signing.cmd'
      artifacts:
        - from: 'pipeline-signing\oms-signing'
          to: 'buildoutput'
          include:
            - '**/*'
          signing_options:
            profile: 'CP-453387-pgpdetached'

package:
  commands:
    - !!buildcommand
      name: 'DSC Re-Package With Signed Artifacts'
      command: 'pipeline-dsc-packaging.cmd'
      artifacts:
        - from: 'pipeline-signing\dsc\signing'
          to: 'buildoutput\dsc_signing'
          include:
            - '**/*'          
